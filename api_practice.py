# -*- coding: utf-8 -*-
"""API_practice.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1voPOHqzIWnDmCHxfSzjacBWNVwLOQrLI

## 영화 API
"""

import pandas as pd
import requests
from google.colab import userdata
import xml.etree.ElementTree as ET

# request
url = 'http://api.kcisa.kr/openapi/service/rest/meta5/getKFCC0502'

params = {
    ('serviceKey', userdata.get('boxoffice_api_key'))
    }

response = requests.get(url, params)

# 확인용
# print(response.text)

# XML parsing
root = ET.fromstring(response.text)
data = []

for item in root.findall('.//item'):
    item_data = {}
    for child in item:
        item_data[child.tag] = child.text
    data.append(item_data)

df = pd.DataFrame(data)
df.head()



df.head(10)

"""## 날씨 API"""

import pandas as pd
import requests
from google.colab import userdata
import xml.etree.ElementTree as ET

# request
url = 'http://apis.data.go.kr/1360000/WthrWrnInfoService/getWthrWrnList'

params = {
    ('ServiceKey', userdata.get('weather_api_decoding')),
    ('pageNo', '1'),
    ('numOfRows', '30'),
    ('fromTmFc', '20250113'),
    ('toTmFc', '20250118')
    }

response = requests.get(url, params)

# 확인용
#print(response.text)

# XML parsing
root = ET.fromstring(response.text)
data = []

for item in root.findall('.//item'):
    item_data = {}
    for child in item:
        item_data[child.tag] = child.text
    data.append(item_data)

df = pd.DataFrame(data)
df.head()



"""## 빅쿼리에 업로드"""



from google.colab import files
from google.oauth2 import service_account
uploaded = files.upload()

# 서비스 계정 키 파일 경로 설정
key_path = list(uploaded.keys())[0]  # 업로드한 파일 이름
credentials = service_account.Credentials.from_service_account_file(key_path)

from google.cloud import bigquery

# BigQuery 클라이언트 생성
client = bigquery.Client(credentials=credentials, project=credentials.project_id)

# 업로드할 데이터셋 및 테이블 정보 설정
dataset_id = "mydataset"  # BigQuery 데이터셋 ID
table_id = "movies"      # BigQuery 테이블 ID

# 데이터프레임 업로드
job = client.load_table_from_dataframe(df, f"{dataset_id}.{table_id}")

# 작업 완료 대기
job.result()

# 결과 확인
print(f"Uploaded {job.output_rows} rows to {dataset_id}.{table_id}.")